/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM 1
#define SYM 2
#define NUM 3
#define BT 4
#define ARROWS 5
#define FUN 6

&lt { flavor = "tap-preferred"; };

&mt { flavor = "tap-preferred"; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_MORPH";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        apos_quote: apos_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHE_QUOTATION";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DOUBLE_QUOTES>;

            mods = <(MOD_LSFT)>;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        jkentert {
            bindings = <&kp RET>;
            key-positions = <18 19>;
        };

        uibackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <28 29>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <20 21>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <2 3>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <12 13>;
        };

        pu {
            bindings = <&kp PAGE_UP>;
            key-positions = <6 7>;
        };

        pd {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <16 17>;
        };
    };

    macros {
        key: key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp H &kp L &kp DOT &kp N8 &kp N8 &kp N0 &kp N6 &kp N0 &kp N2 &kp AMPS &kp STAR &kp LPAR &kp ENTER>;
            label = "KEY";
        };

        changekey: changekey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp H &kp L &kp DOT &kp N8 &kp N8 &kp N0 &kp N6 &kp N0 &kp N2 &kp CARET &kp AMPS &kp STAR>;
            label = "CHANGEKEY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q    &kp W  &kp E           &kp R                 &kp T             &kp Y        &kp U             &kp I         &kp O    &kp P
  &kp A    &kp S  &kp D           &kp F                 &lt 5 G           &lt 5 RS(H)  &kp J             &kp K         &kp L    &kp ENTER
  &lt 3 Z  &kp X  &kp C           &kp V                 &kp B             &kp N        &kp M             &kp COMMA     &kp DOT  &mt LEFT_SHIFT SLASH
                  &lt 6 CAPSLOCK  &mt LCTRL LEFT_SHIFT  &lt 1 LEFT_WIN    &kp SPACE    &ltq 2 BACKSPACE  &lt 4 DELETE
            >;
        };

        num_layer {
            bindings = <
  &kp N1     &kp N2      &kp N3     &kp N4        &kp N5          &kp N6     &kp N7    &kp N8      &kp N9    &kp N0
  &kp MINUS  &kp EQUAL   &kp F2     &kp F5        &kp TAB         &kp BSLH   &kp LBKT  &kp RBKT    &kp SEMI  &kp APOS
  &kp GRAVE  &kp C_MUTE  &key       &kp C_VOL_DN  &kp C_VOL_UP    &none      &none     &none       &none     &none
                         &kp LSHFT  &kp LALT      &trans          &kp SPACE  &kp BSPC  &kp DELETE
            >;
        };

        nav_layer {
            bindings = <
  &kp LS(N1)     &kp LS(N2)     &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)    &kp LS(N7)    &kp LS(N8)     &kp LS(N9)    &kp LS(N0)
  &kp LS(MINUS)  &kp LS(EQUAL)  &none       &none       &none         &kp LS(BSLH)  &kp LS(LBKT)  &kp LS(RBKT)   &kp LS(SEMI)  &kp LS(APOS)
  &kp LS(GRAVE)  &none          &none       &none       &none         &trans        &none         &kp LS(COMMA)  &kp LS(DOT)   &kp LS(FSLH)
                                &trans      &kp BSPC    &kp SPACE     &kp SPACE     &trans        &trans
            >;
        };

        fun_layer {
            bindings = <
  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp N7  &kp N8   &kp N9     &kp LS(EQUAL)  &kp MINUS   &kp LS(N8)  &kp FSLH  &kp BSPC
  &kp LALT        &kp BSPC         &kp N4  &kp N5   &kp N6     &kp EQUAL      &kp LS(N9)  &kp LS(N0)  &none     &kp ENTER
  &trans          &trans           &kp N1  &kp N2   &kp N3     &none          &none       &none       &kp LALT  &kp TAB
                                   &kp N0  &kp DOT  &kp TAB    &kp SPACE      &kp BSPC    &kp DELETE
            >;
        };

        layer_4 {
            bindings = <
  &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &kp F1   &kp F2   &kp F3           &kp F4   &kp F5
  &bt BT_CLR     &bt BT_CLR_ALL  &bt BT_NXT     &bt BT_PRV     &bootloader      &kp F6   &kp F7   &kp F8           &kp F9   &kp F10
  &bt BT_DISC 0  &bt BT_DISC 1   &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &kp F11  &kp F12  &kp PRINTSCREEN  &kp INS  &none
                                 &out OUT_BLE   &out OUT_USB   &out OUT_TOG     &none    &none    &none
            >;
        };

        layer_5 {
            bindings = <
  &trans  &trans          &kp UP_ARROW    &trans           &kp TAB     &trans     &trans          &kp UP_ARROW    &trans           &trans
  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans      &trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
  &trans  &trans          &trans          &trans           &trans      &trans     &trans          &trans          &trans           &trans
                          &trans          &kp LALT         &kp LGUI    &kp SPACE  &kp BSPC        &kp DEL
            >;
        };

        layer_6 {
            bindings = <
  &changekey           &kp LA(LC(W))  &kp LC(LSHFT)  &kp LC(Y)  &kp LG(TAB)    &trans     &trans     &trans      &trans  &kp BSPC
  &mt LA(LC(A)) LC(A)  &kp LC(S)      &kp LG(D)      &kp LC(F)  &kp LG(L)      &trans     &kp LC(J)  &trans      &trans  &kp ENTER
  &kp LC(Z)            &kp LC(X)      &kp LC(C)      &kp LC(V)  &kp LC(B)      &trans     &trans     &trans      &trans  &trans
                                      &trans         &kp LC(P)  &kp LC(J)      &kp SPACE  &kp BSPC   &kp DELETE
            >;
        };
    };
};
